import PySimpleGUI as sg

students_data = []

# Function to save data to a file
def save_data_to_file(data):
    with open("data.txt", "w") as file:
        for row in data:
            file.write(",".join(row) + "\n")


def load_data_from_file():
    try:
        with open("data.txt", "r") as file:
            data = file.readlines()
            data = [row.strip().split(",") for row in data]
            return data
    except FileNotFoundError:
        return []

def update_grades():
    for row in students_data:
        homework_grade = int(row[1])
        midterm_grade = int(row[2])
        final_grade = int(row[3])
        total_grade = homework_grade + midterm_grade + final_grade
        letter_grade = convert_to_letter_grade(total_grade)
        row.append(str(total_grade))
        row.append(letter_grade)

# Function to convert total grade to letter grade
def convert_to_letter_grade(total_grade):
    if total_grade >= 90:
        return "A"
    elif total_grade >= 80:
        return "B"
    elif total_grade >= 70:
        return "C"
    elif total_grade >= 60:
        return "D"
    elif total_grade >= 50:
        return "E"
    else:
        return "F"

# Function to rank students based on total grades
def rank_students():
    students_data.sort(key=lambda x: int(x[4]), reverse=True)

# Layout for Tab 1
tab1_layout = [
    [sg.Text('Student name'), sg.InputText(key="count-name")],
    [sg.Text('Homework grade'), sg.InputText(key="homework-grade")],
    [sg.Text('Midterm grade'), sg.InputText(key="midterm-grade")],
    [sg.Text('Final grade'), sg.InputText(key="final-grade")],
    [sg.Button("Add Student")]
]

# Layout for Tab 2
tab2_layout = [
    [
        sg.Table(
            values=students_data,
            headings=["Name", "Homework Grade", "Midterm Grade", "Final Grade", "Total Grade", "Letter Grade"],
            key="students-table",
            col_widths=[20, 15, 15, 15, 15, 15],
            justification="left",
            num_rows=10,
            enable_events=True,
            bind_return_key=True,
            auto_size_columns=False,
            display_row_numbers=False,
            font=("Helvetica", 16)  # Adjust the font size as per your preference
        )
    ],
    [sg.Button("-", key="delete-button")]
]

# Layout for Tab 3
tab3_layout = [
    [
        sg.Table(
            values=students_data,
            headings=["Rank", "Name", "Total Grade", "Letter Grade"],
            key="ranked-students-table",
            col_widths=[10, 20, 15, 15],
            justification="left",
            num_rows=10,
            enable_events=True,
            bind_return_key=True,
            auto_size_columns=False,
            display_row_numbers=False,
            font=("Helvetica", 16)  # Adjust the font size as per your preference
        )
    ]
]

# Create the main window with tabs
layout = [
    [sg.TabGroup([
        [sg.Tab('Tab 1', tab1_layout), sg.Tab('Tab 2', tab2_layout), sg.Tab('Tab 3', tab3_layout)]
    ])],
]

window = sg.Window('Tabbed Window', layout)

# Load data from file
students_data = load_data_from_file()

# Event loop
while True:
    event, values = window.read()

    if event == sg.WINDOW_CLOSED:
        # Save data to file when closing the window
        save_data_to_file(students_data)
        break

    if event == "Add Student":
        name = values["count-name"]
        homework_grade = values["homework-grade"]
        midterm_grade = values["midterm-grade"]
        final_grade = values["final-grade"]
        total_grade = int(homework_grade) + int(midterm_grade) + int(final_grade)
        letter_grade = convert_to_letter_grade(total_grade)
        students_data.append([name, homework_grade, midterm_grade, final_grade, str(total_grade), letter_grade])
        window["students-table"].update(values=students_data)
        window["count-name"].update("")  # Clear the name input field
        window["homework-grade"].update("")  # Clear the homework grade input field
        window["midterm-grade"].update("")  # Clear the midterm grade input field
        window["final-grade"].update("")  # Clear the final grade input field

    if event == "students-table":
        selected_row = values["students-table"]
        if selected_row:
            selected_row_index = selected_row[0]
            if selected_row_index < len(students_data):
                name = students_data[selected_row_index][0]
                homework_grade = students_data[selected_row_index][1]
                midterm_grade = students_data[selected_row_index][2]
                final_grade = students_data[selected_row_index][3]
                window["count-name"].update(name)  # Update the name input field
                window["homework-grade"].update(homework_grade)  # Update the homework grade input field
                window["midterm-grade"].update(midterm_grade)  # Update the midterm grade input field
                window["final-grade"].update(final_grade)  # Update the final grade input field

    if event == "delete-button":
        selected_row = values["students-table"]
        if selected_row:
            selected_row_index = selected_row[0]
            if selected_row_index < len(students_data):
                removed_row = students_data.pop(selected_row_index)
                window["students-table"].update(values=students_data)


    update_grades()


    rank_students()


    window["ranked-students-table"].update(values=[[str(index+1), row[0], row[4], row[5]] for index, row in enumerate(students_data)])

window.close()
